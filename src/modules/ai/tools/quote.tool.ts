import { Inject, Injectable } from '@nestjs/common';
import { BaseTool } from './base.tool';
import { QuoteRepository } from '@/vectorstore-db/repositories/quote.repository';

@Injectable()
export class QuoteTool extends BaseTool {
  @Inject(QuoteRepository)
  private readonly quoteRepository: QuoteRepository;

  public clone(config?: any): this {
    return super.clone(config);
  }
  // schema = z.object({}) as any;

  name = 'quote_tool';
  description = `C√¥ng c·ª• quote_tool. H·ªØu √≠ch khi b·∫°n c·∫ßn tr·∫£ l·ªùi c√¢u h·ªèi b·∫±ng c√°c tr√≠ch d·∫´n. ƒê·∫ßu v√†o n√™n l√† m·ªôt c√¢u truy v·∫•n t√¨m ki·∫øm. ƒê·∫ßu ra l√† m·ªôt m·∫£ng JSON ch·ª©a c√°c k·∫øt qu·∫£.`;
  instruction = '';
  constructor() {
    super();
  }

  async _call(input: any) {
    const results = await this.getQuoteInfo(input);
    return JSON.stringify(results);
  }
  async getQuoteInfo(
    input: string,
    take: number = 2,
  ): Promise<{ content: string }[]> {
    try {
      const t = await this.quoteRepository.queryOrmVector(input, take, true);
      return t.map((quote) => ({ content: quote.pageContent }));
    } catch (error) {
      console.log('üöÄ ~ AiService ~ getQuoteInfo ~ error:', error);
      return [];
    }
  }
}
